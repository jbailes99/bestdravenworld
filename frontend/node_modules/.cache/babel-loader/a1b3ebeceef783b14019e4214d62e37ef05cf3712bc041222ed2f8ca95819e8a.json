{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export const MatchDataContext=/*#__PURE__*/createContext();export const MatchDataProvider=_ref=>{let{children}=_ref;const[account,setAccount]=useState(null);const[matches,setMatches]=useState([]);const[averageKDA,setAverageKDA]=useState(0);const[lastDravenWin,setLastDravenWin]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const GAME_NAME='razr708x54e3328';const TAG_LINE='5451';const TARGET_CHAMPION_NAME='Draven';const backendUrl=process.env.REACT_APP_BACKEND_SERVER_URI;useEffect(()=>{const fetchAccountDetails=async()=>{try{const response=await fetch(`${backendUrl}/api/account/${GAME_NAME}/${TAG_LINE}`);const data=await response.json();setAccount(data);setLoading(false);}catch(error){console.error('Error fetching data:',error);setLoading(false);}};fetchAccountDetails();},[]);useEffect(()=>{const fetchMatchHistory=async()=>{if(account!==null&&account!==void 0&&account.puuid){try{console.log('Fetching match history...');const matchResponse=await fetch(`${backendUrl}/api/matches/${account.puuid}`);const matchData=await matchResponse.json();console.log('Fetched match list:',matchData);const matchDetailsPromises=matchData.map(async matchId=>{console.log(`Fetching details for match ID: ${matchId}`);const detailResponse=await fetch(`${backendUrl}/api/match/${matchId}`);return await detailResponse.json();});const matchesDetails=await Promise.all(matchDetailsPromises);console.log('Fetched match details:',matchesDetails);const filteredMatches=matchesDetails.filter(match=>match.info.participants.some(participant=>participant.puuid===account.puuid&&participant.championName===TARGET_CHAMPION_NAME));const sortedMatches=filteredMatches.sort((a,b)=>b.info.gameStartTimestamp-a.info.gameStartTimestamp);const lastWin=sortedMatches.find(match=>{const participant=match.info.participants.find(p=>p.puuid===account.puuid);const team=match.info.teams.find(team=>team.teamId===participant.teamId);return team===null||team===void 0?void 0:team.win;// Find the first match that was a win\n});// Calculate average K/D/A\nconst totalStats=filteredMatches.reduce((acc,match)=>{const participant=match.info.participants.find(p=>p.puuid===account.puuid);if(participant){acc.totalKills+=participant.kills;acc.totalDeaths+=participant.deaths;acc.totalAssists+=participant.assists;acc.matchCount+=1;}return acc;},{totalKills:0,totalDeaths:0,totalAssists:0,matchCount:0});const avgKDA=totalStats.matchCount>0?(totalStats.totalKills+totalStats.totalAssists)/totalStats.totalDeaths:0;setMatches(filteredMatches);setAverageKDA(avgKDA.toFixed(2));// Set average K/D/A ratio\nsetLastDravenWin(lastWin||null);}catch(error){console.error('Error fetching match history:',error);setError('Failed to fetch match history');}}};fetchMatchHistory();},[account]);return/*#__PURE__*/_jsx(MatchDataContext.Provider,{value:{account,matches,lastDravenWin,averageKDA,loading,error},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","MatchDataContext","MatchDataProvider","_ref","children","account","setAccount","matches","setMatches","averageKDA","setAverageKDA","lastDravenWin","setLastDravenWin","loading","setLoading","error","setError","GAME_NAME","TAG_LINE","TARGET_CHAMPION_NAME","backendUrl","process","env","REACT_APP_BACKEND_SERVER_URI","fetchAccountDetails","response","fetch","data","json","console","fetchMatchHistory","puuid","log","matchResponse","matchData","matchDetailsPromises","map","matchId","detailResponse","matchesDetails","Promise","all","filteredMatches","filter","match","info","participants","some","participant","championName","sortedMatches","sort","a","b","gameStartTimestamp","lastWin","find","p","team","teams","teamId","win","totalStats","reduce","acc","totalKills","kills","totalDeaths","deaths","totalAssists","assists","matchCount","avgKDA","toFixed","Provider","value"],"sources":["C:/Users/Jakeb/OneDrive/Documents/Projects/allahuakbargrenadexplode/bestdravenworld/frontend/src/components/MatchDataContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n\r\nexport const MatchDataContext = createContext()\r\n\r\nexport const MatchDataProvider = ({ children }) => {\r\n  const [account, setAccount] = useState(null)\r\n  const [matches, setMatches] = useState([])\r\n  const [averageKDA, setAverageKDA] = useState(0)\r\n  const [lastDravenWin, setLastDravenWin] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(null)\r\n\r\n  const GAME_NAME = 'razr708x54e3328'\r\n  const TAG_LINE = '5451'\r\n  const TARGET_CHAMPION_NAME = 'Draven'\r\n  const backendUrl = process.env.REACT_APP_BACKEND_SERVER_URI\r\n\r\n  useEffect(() => {\r\n    const fetchAccountDetails = async () => {\r\n      try {\r\n        const response = await fetch(`${backendUrl}/api/account/${GAME_NAME}/${TAG_LINE}`)\r\n        const data = await response.json()\r\n        setAccount(data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error)\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchAccountDetails()\r\n  }, [])\r\n  useEffect(() => {\r\n    const fetchMatchHistory = async () => {\r\n      if (account?.puuid) {\r\n        try {\r\n          console.log('Fetching match history...')\r\n\r\n          const matchResponse = await fetch(`${backendUrl}/api/matches/${account.puuid}`)\r\n          const matchData = await matchResponse.json()\r\n\r\n          console.log('Fetched match list:', matchData)\r\n\r\n          const matchDetailsPromises = matchData.map(async matchId => {\r\n            console.log(`Fetching details for match ID: ${matchId}`)\r\n            const detailResponse = await fetch(`${backendUrl}/api/match/${matchId}`)\r\n            return await detailResponse.json()\r\n          })\r\n\r\n          const matchesDetails = await Promise.all(matchDetailsPromises)\r\n\r\n          console.log('Fetched match details:', matchesDetails)\r\n\r\n          const filteredMatches = matchesDetails.filter(match =>\r\n            match.info.participants.some(\r\n              participant => participant.puuid === account.puuid && participant.championName === TARGET_CHAMPION_NAME\r\n            )\r\n          )\r\n\r\n          const sortedMatches = filteredMatches.sort((a, b) => b.info.gameStartTimestamp - a.info.gameStartTimestamp)\r\n          const lastWin = sortedMatches.find(match => {\r\n            const participant = match.info.participants.find(p => p.puuid === account.puuid)\r\n            const team = match.info.teams.find(team => team.teamId === participant.teamId)\r\n            return team?.win // Find the first match that was a win\r\n          })\r\n\r\n          // Calculate average K/D/A\r\n          const totalStats = filteredMatches.reduce(\r\n            (acc, match) => {\r\n              const participant = match.info.participants.find(p => p.puuid === account.puuid)\r\n              if (participant) {\r\n                acc.totalKills += participant.kills\r\n                acc.totalDeaths += participant.deaths\r\n                acc.totalAssists += participant.assists\r\n                acc.matchCount += 1\r\n              }\r\n              return acc\r\n            },\r\n            { totalKills: 0, totalDeaths: 0, totalAssists: 0, matchCount: 0 }\r\n          )\r\n\r\n          const avgKDA =\r\n            totalStats.matchCount > 0 ? (totalStats.totalKills + totalStats.totalAssists) / totalStats.totalDeaths : 0\r\n\r\n          setMatches(filteredMatches)\r\n          setAverageKDA(avgKDA.toFixed(2)) // Set average K/D/A ratio\r\n          setLastDravenWin(lastWin || null)\r\n        } catch (error) {\r\n          console.error('Error fetching match history:', error)\r\n          setError('Failed to fetch match history')\r\n        }\r\n      }\r\n    }\r\n\r\n    fetchMatchHistory()\r\n  }, [account])\r\n\r\n  return (\r\n    <MatchDataContext.Provider value={{ account, matches, lastDravenWin, averageKDA, loading, error }}>\r\n      {children}\r\n    </MatchDataContext.Provider>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}