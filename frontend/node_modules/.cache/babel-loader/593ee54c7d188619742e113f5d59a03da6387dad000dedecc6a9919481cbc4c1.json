{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakeb\\\\OneDrive\\\\Documents\\\\Projects\\\\allahuakbargrenadexplode\\\\bestdravenworld\\\\frontend\\\\src\\\\components\\\\MatchDataContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MatchDataContext = /*#__PURE__*/createContext();\nexport const MatchDataProvider = ({\n  children\n}) => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [matches, setMatches] = useState([]);\n  const [averageKDA, setAverageKDA] = useState(0);\n  const [lastDravenWin, setLastDravenWin] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const GAME_NAME = 'razr708x54e3328';\n  const TAG_LINE = '5451';\n  const TARGET_CHAMPION_NAME = 'Draven';\n  useEffect(() => {\n    const fetchAccountDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/account/${GAME_NAME}/${TAG_LINE}`);\n        const data = await response.json();\n        setAccount(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n    fetchAccountDetails();\n  }, []);\n  useEffect(() => {\n    const fetchMatchHistory = async () => {\n      if (account !== null && account !== void 0 && account.puuid) {\n        try {\n          console.log('Fetching match history...');\n          const matchResponse = await fetch(`http://localhost:5000/api/matches/${account.puuid}`);\n          const matchData = await matchResponse.json();\n          console.log('Fetched match list:', matchData);\n          const matchDetailsPromises = matchData.map(async matchId => {\n            console.log(`Fetching details for match ID: ${matchId}`);\n            const detailResponse = await fetch(`http://localhost:5000/api/match/${matchId}`);\n            return await detailResponse.json();\n          });\n          const matchesDetails = await Promise.all(matchDetailsPromises);\n          console.log('Fetched match details:', matchesDetails);\n          const filteredMatches = matchesDetails.filter(match => match.info.participants.some(participant => participant.puuid === account.puuid && participant.championName === TARGET_CHAMPION_NAME));\n          const sortedMatches = filteredMatches.sort((a, b) => b.info.gameStartTimestamp - a.info.gameStartTimestamp);\n          const lastWin = sortedMatches.find(match => {\n            const participant = match.info.participants.find(p => p.puuid === account.puuid);\n            const team = match.info.teams.find(team => team.teamId === participant.teamId);\n            return team === null || team === void 0 ? void 0 : team.win; // Find the first match that was a win\n          });\n\n          // Calculate average K/D/A\n          const totalStats = filteredMatches.reduce((acc, match) => {\n            const participant = match.info.participants.find(p => p.puuid === account.puuid);\n            if (participant) {\n              acc.totalKills += participant.kills;\n              acc.totalDeaths += participant.deaths;\n              acc.totalAssists += participant.assists;\n              acc.matchCount += 1;\n            }\n            return acc;\n          }, {\n            totalKills: 0,\n            totalDeaths: 0,\n            totalAssists: 0,\n            matchCount: 0\n          });\n          const avgKDA = totalStats.matchCount > 0 ? (totalStats.totalKills + totalStats.totalAssists) / totalStats.totalDeaths : 0;\n          setMatches(filteredMatches);\n          setAverageKDA(avgKDA.toFixed(2)); // Set average K/D/A ratio\n          setLastDravenWin(lastWin || null);\n        } catch (error) {\n          console.error('Error fetching match history:', error);\n          setError('Failed to fetch match history');\n        }\n      }\n    };\n    fetchMatchHistory();\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(MatchDataContext.Provider, {\n    value: {\n      account,\n      matches,\n      lastDravenWin,\n      averageKDA,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchDataProvider, \"+n6OCInLGh5PFslNlXdkUp+dESA=\");\n_c = MatchDataProvider;\nvar _c;\n$RefreshReg$(_c, \"MatchDataProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","MatchDataContext","MatchDataProvider","children","_s","account","setAccount","matches","setMatches","averageKDA","setAverageKDA","lastDravenWin","setLastDravenWin","loading","setLoading","error","setError","GAME_NAME","TAG_LINE","TARGET_CHAMPION_NAME","fetchAccountDetails","response","fetch","data","json","console","fetchMatchHistory","puuid","log","matchResponse","matchData","matchDetailsPromises","map","matchId","detailResponse","matchesDetails","Promise","all","filteredMatches","filter","match","info","participants","some","participant","championName","sortedMatches","sort","a","b","gameStartTimestamp","lastWin","find","p","team","teams","teamId","win","totalStats","reduce","acc","totalKills","kills","totalDeaths","deaths","totalAssists","assists","matchCount","avgKDA","toFixed","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jakeb/OneDrive/Documents/Projects/allahuakbargrenadexplode/bestdravenworld/frontend/src/components/MatchDataContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n\r\nexport const MatchDataContext = createContext()\r\n\r\nexport const MatchDataProvider = ({ children }) => {\r\n  const [account, setAccount] = useState(null)\r\n  const [matches, setMatches] = useState([])\r\n  const [averageKDA, setAverageKDA] = useState(0)\r\n  const [lastDravenWin, setLastDravenWin] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(null)\r\n\r\n  const GAME_NAME = 'razr708x54e3328'\r\n  const TAG_LINE = '5451'\r\n  const TARGET_CHAMPION_NAME = 'Draven'\r\n\r\n  useEffect(() => {\r\n    const fetchAccountDetails = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/account/${GAME_NAME}/${TAG_LINE}`)\r\n        const data = await response.json()\r\n        setAccount(data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error)\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchAccountDetails()\r\n  }, [])\r\n  useEffect(() => {\r\n    const fetchMatchHistory = async () => {\r\n      if (account?.puuid) {\r\n        try {\r\n          console.log('Fetching match history...')\r\n\r\n          const matchResponse = await fetch(`http://localhost:5000/api/matches/${account.puuid}`)\r\n          const matchData = await matchResponse.json()\r\n\r\n          console.log('Fetched match list:', matchData)\r\n\r\n          const matchDetailsPromises = matchData.map(async matchId => {\r\n            console.log(`Fetching details for match ID: ${matchId}`)\r\n            const detailResponse = await fetch(`http://localhost:5000/api/match/${matchId}`)\r\n            return await detailResponse.json()\r\n          })\r\n\r\n          const matchesDetails = await Promise.all(matchDetailsPromises)\r\n\r\n          console.log('Fetched match details:', matchesDetails)\r\n\r\n          const filteredMatches = matchesDetails.filter(match =>\r\n            match.info.participants.some(\r\n              participant => participant.puuid === account.puuid && participant.championName === TARGET_CHAMPION_NAME\r\n            )\r\n          )\r\n\r\n          const sortedMatches = filteredMatches.sort((a, b) => b.info.gameStartTimestamp - a.info.gameStartTimestamp)\r\n          const lastWin = sortedMatches.find(match => {\r\n            const participant = match.info.participants.find(p => p.puuid === account.puuid)\r\n            const team = match.info.teams.find(team => team.teamId === participant.teamId)\r\n            return team?.win // Find the first match that was a win\r\n          })\r\n\r\n          // Calculate average K/D/A\r\n          const totalStats = filteredMatches.reduce(\r\n            (acc, match) => {\r\n              const participant = match.info.participants.find(p => p.puuid === account.puuid)\r\n              if (participant) {\r\n                acc.totalKills += participant.kills\r\n                acc.totalDeaths += participant.deaths\r\n                acc.totalAssists += participant.assists\r\n                acc.matchCount += 1\r\n              }\r\n              return acc\r\n            },\r\n            { totalKills: 0, totalDeaths: 0, totalAssists: 0, matchCount: 0 }\r\n          )\r\n\r\n          const avgKDA =\r\n            totalStats.matchCount > 0 ? (totalStats.totalKills + totalStats.totalAssists) / totalStats.totalDeaths : 0\r\n\r\n          setMatches(filteredMatches)\r\n          setAverageKDA(avgKDA.toFixed(2)) // Set average K/D/A ratio\r\n          setLastDravenWin(lastWin || null)\r\n        } catch (error) {\r\n          console.error('Error fetching match history:', error)\r\n          setError('Failed to fetch match history')\r\n        }\r\n      }\r\n    }\r\n\r\n    fetchMatchHistory()\r\n  }, [account])\r\n\r\n  return (\r\n    <MatchDataContext.Provider value={{ account, matches, lastDravenWin, averageKDA, loading, error }}>\r\n      {children}\r\n    </MatchDataContext.Provider>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}